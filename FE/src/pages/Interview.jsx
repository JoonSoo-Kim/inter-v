/* =========================================================
   Interview.jsx  (update v4)
   ========================================================= */
import { useCallback, useEffect, useRef, useState } from "react";
import Header from '../partials/Header';
import Footer from '../partials/Footer';
import {
  createInterview,
  startInterview,
  getNextQuestion,
  getInterviewQuestions,
  uploadAudioAnswer,
  completeInterview,
  updateInterviewTime,
  getMyResume,
  resumeExists,
  listCompanies,
  listPositions,
} from '../utils/api';

export default function Interview() {
  /* --------------------------------------------------
     local state
  -------------------------------------------------- */
  const [interview, setInterview] = useState(null);            // Ï†ÑÏ≤¥ ÏÑ∏ÏÖò Ï†ïÎ≥¥
  const [question, setQuestion]   = useState(null);            // ÌòÑÏû¨ ÏßàÎ¨∏
  const [seconds, setSeconds]     = useState(0);               // ÌÉÄÏù¥Î®∏(ÏßàÎ¨∏Î≥Ñ)
  const [totalSec, setTotalSec]   = useState(0);               // ÏÑ∏ÏÖò Ï†ÑÏ≤¥ ÌÉÄÏûÑ
  const [isCounting, setIsCounting] = useState(false);         // Ïπ¥Ïö¥Ìä∏ ÌôúÏÑ±Ìôî Ïó¨Î∂Ä
  const [isRecording, setIsRecording] = useState(false);       // MediaRecorder ÏßÑÌñâÏ§ë
  const [audioBlob, setAudioBlob] = useState(null);           // ÎÖπÏùåÎêú Ïò§ÎîîÏò§
  const [isSubmitting, setIsSubmitting] = useState(false);     // ÎãµÎ≥Ä Ï†úÏ∂úÏ§ë
  const [summary, setSummary] = useState(null);                // ÎßàÏßÄÎßâ ÏöîÏïΩÎ∑∞Ïö© Îç∞Ïù¥ÌÑ∞
  const mediaRef = useRef(null);                               // MediaRecorder Ïù∏Ïä§ÌÑ¥Ïä§
  const chunks   = useRef([]);
  const timerRef = useRef(null);
  
  // Î©¥Ï†ë ÏÑ§Ï†ï ÏÉÅÌÉú
  const [companies, setCompanies] = useState([]);
  const [positions, setPositions] = useState([]);
  const [selectedCompany, setSelectedCompany] = useState('');
  const [selectedPosition, setSelectedPosition] = useState('');
  const [resumeId, setResumeId] = useState(null);
  const [hasResume, setHasResume] = useState(false);
  const [loadingSetup, setLoadingSetup] = useState(true);
  const [questionCount, setQuestionCount] = useState(5);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);

  /* --------------------------------------------------
     Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  -------------------------------------------------- */
  useEffect(() => {
    const loadInitialData = async () => {
      try {
        // Ïù¥Î†•ÏÑú Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
        const { data: existsData } = await resumeExists();
        setHasResume(existsData.data);
        
        if (existsData.data) {
          // Ïù¥Î†•ÏÑúÍ∞Ä ÏûàÏúºÎ©¥ ID Í∞ÄÏ†∏Ïò§Í∏∞
          const { data: resumeData } = await getMyResume();
          setResumeId(resumeData.data.id);
        }
        
        // ÌöåÏÇ¨ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
        const { data: companiesData } = await listCompanies();
        setCompanies(companiesData.data || []);
      } catch (err) {
        console.error("Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", err);
      } finally {
        setLoadingSetup(false);
      }
    };
    
    loadInitialData();
  }, []);
  
  /* --------------------------------------------------
     ÌöåÏÇ¨ ÏÑ†ÌÉù Ïãú Ìè¨ÏßÄÏÖò Î°úÎìú
  -------------------------------------------------- */
  const handleCompanyChange = async (companyId) => {
    setSelectedCompany(companyId);
    setSelectedPosition('');
    setPositions([]);
    
    if (companyId) {
      try {
        const { data } = await listPositions(companyId);
        setPositions(data.data || []);
      } catch (err) {
        console.error("Ìè¨ÏßÄÏÖò Î°úÎìú Ïã§Ìå®:", err);
      }
    }
  };

  /* --------------------------------------------------
     ÌÉÄÏù¥Î®∏ Í¥ÄÎ¶¨
  -------------------------------------------------- */
  const startTimer = useCallback(() => {
    if (!isCounting) {
      setIsCounting(true);
      timerRef.current = setInterval(() => {
        setSeconds((s) => s + 1);
        setTotalSec((t) => t + 1);
      }, 1000);
    }
  }, [isCounting]);

  const stopTimer = useCallback(() => {
    setIsCounting(false);
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
    }
  }, []);

  const resetQuestionTimer = useCallback(() => {
    setSeconds(0);
  }, []);

  /* --------------------------------------------------
     Interview ÏãúÏûë
  -------------------------------------------------- */
  const handleStart = async () => {
    if (!selectedPosition) {
      alert("Ìè¨ÏßÄÏÖòÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }
    
    try {
      // Î©¥Ï†ë ÏÑ∏ÏÖò ÏÉùÏÑ±
      const createParams = {
        resumeId: resumeId,
        positionId: Number(selectedPosition),
        title: "Î™®Ïùò Î©¥Ï†ë Ïó∞Ïäµ",
        type: "TEXT",
        mode: "PRACTICE",
        useAI: false,
        questionCount: questionCount
      };
      
      const { data } = await createInterview(createParams);
      setInterview(data.data);
      
      // Î©¥Ï†ë ÏãúÏûë ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
      await startInterview(data.data.id);
      
      // Ï≤´ Î≤àÏß∏ ÏßàÎ¨∏ Í∞ÄÏ†∏Ïò§Í∏∞
      const { data: questionData } = await getNextQuestion(data.data.id);
      setQuestion(questionData.data);
      setCurrentQuestionIndex(1);
      
    } catch (err) {
      console.error("Î©¥Ï†ë ÏãúÏûë Ïã§Ìå®:", err);
      alert("Î©¥Ï†ëÏùÑ ÏãúÏûëÌï† Ïàò ÏóÜÏäµÎãàÎã§.");
    }
  };

  /* --------------------------------------------------
     ÎÖπÏùå ÏãúÏûë
  -------------------------------------------------- */
  const handleStartRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const recorder = new MediaRecorder(stream);
      mediaRef.current = recorder;
      chunks.current = [];

      recorder.ondataavailable = (e) => chunks.current.push(e.data);
      recorder.onstop = () => {
        const blob = new Blob(chunks.current, { type: 'audio/webm' });
        setAudioBlob(blob);
        stream.getTracks().forEach((t) => t.stop());
      };

      recorder.start();
      setIsRecording(true);
      
      // ÎÖπÏùå ÏãúÏûëÌï† ÎïåÎßå ÌÉÄÏù¥Î®∏ ÏãúÏûë
      resetQuestionTimer();
      startTimer();
    } catch (err) {
      console.error("üéôÔ∏è ÎßàÏù¥ÌÅ¨ Í∂åÌïú ÏóêÎü¨", err);
      alert("ÎßàÏù¥ÌÅ¨ Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî.");
    }
  };

  /* --------------------------------------------------
     ÎÖπÏùå Ï¢ÖÎ£å
  -------------------------------------------------- */
  const handleStopRecording = () => {
    if (mediaRef.current && isRecording) {
      mediaRef.current.stop();
      setIsRecording(false);
      stopTimer(); // ÎÖπÏùå Ï¢ÖÎ£å Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÏßÄ
    }
  };

  /* --------------------------------------------------
     ÎãµÎ≥Ä Ï†úÏ∂ú
  -------------------------------------------------- */
  const handleSubmitAnswer = async () => {
    if (!audioBlob || !question) return;
    
    setIsSubmitting(true);
    
    try {
      // FormDataÎ°ú Ïò§ÎîîÏò§ ÌååÏùº Ï†ÑÏÜ°
      const formData = new FormData();
      formData.append('file', audioBlob, 'answer.webm');
      
      await uploadAudioAnswer(question.id, formData);
      
      // Îã§Ïùå ÏßàÎ¨∏ÏúºÎ°ú Ïù¥Îèô ÎòêÎäî Î©¥Ï†ë Ï¢ÖÎ£å
      if (currentQuestionIndex >= questionCount) {
        // ÎßàÏßÄÎßâ ÏßàÎ¨∏Ïù¥ÏóàÏúºÎ©¥ Î©¥Ï†ë Ï¢ÖÎ£å
        await handleCompleteInterview();
      } else {
        // Îã§Ïùå ÏßàÎ¨∏ Í∞ÄÏ†∏Ïò§Í∏∞
        await fetchNextQuestion();
      }
      
    } catch (err) {
      console.error("ÎãµÎ≥Ä Ï†úÏ∂ú Ïã§Ìå®:", err);
      alert("ÎãµÎ≥Ä Ï†úÏ∂úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      setIsSubmitting(false);
    } finally {
      setAudioBlob(null);
    }
  };

  /* --------------------------------------------------
     Îã§Ïùå ÏßàÎ¨∏ Í∞ÄÏ†∏Ïò§Í∏∞
  -------------------------------------------------- */
  const fetchNextQuestion = async () => {
    try {
      const { data } = await getNextQuestion(interview.id);
      
      if (data.data) {
        setQuestion(data.data);
        setCurrentQuestionIndex(prev => prev + 1);
        resetQuestionTimer();
        setIsSubmitting(false);
      }
    } catch (err) {
      if (err.response?.status === 410) {
        // 410 Gone - Îçî Ïù¥ÏÉÅ ÏßàÎ¨∏Ïù¥ ÏóÜÏùå
        await handleCompleteInterview();
      } else {
        console.error("Îã§Ïùå ÏßàÎ¨∏ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", err);
        setIsSubmitting(false);
      }
    }
  };

  /* --------------------------------------------------
     Î©¥Ï†ë Ï¢ÖÎ£å Ï≤òÎ¶¨
  -------------------------------------------------- */
  const handleCompleteInterview = async () => {
    try {
      // ÌÉÄÏù¥Î®∏ Ï†ïÏßÄ
      stopTimer();
      setIsSubmitting(true);
      
      // Î©¥Ï†ë ÏÉÅÌÉúÎ•º ÏôÑÎ£åÎ°ú Î≥ÄÍ≤Ω
      await completeInterview(interview.id);
      
      // Ï¥ù ÏÜåÏöî ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
      await updateInterviewTime(interview.id, { timeInSeconds: totalSec });
      
      // Î™®Îì† ÏßàÎ¨∏Í≥º ÎãµÎ≥Ä Í∞ÄÏ†∏Ïò§Í∏∞
      const { data } = await getInterviewQuestions(interview.id);
      setSummary(data.data);
      setQuestion(null);
      
    } catch (err) {
      console.error("Î©¥Ï†ë Ï¢ÖÎ£å Ï≤òÎ¶¨ Ïã§Ìå®:", err);
      alert("Î©¥Ï†ë Ï¢ÖÎ£å Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    } finally {
      setIsSubmitting(false);
    }
  };

  /* --------------------------------------------------
     Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
  -------------------------------------------------- */
  useEffect(() => {
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, []);

  /* --------------------------------------------------
     JSX Î†åÎçîÎßÅ
  -------------------------------------------------- */
  
  return (
    <div className="flex flex-col min-h-screen overflow-hidden">
      <Header />
      
      <main className="grow">
        <section className="relative">
          <div className="max-w-6xl mx-auto px-4 sm:px-6">
            <div className="pt-32 pb-12 md:pt-40 md:pb-20">
              
              {/* Î©¥Ï†ë ÏãúÏûë Ï†Ñ */}
              {!interview && !summary && (
                <div className="max-w-3xl mx-auto">
                  <h1 className="h2 mb-8 text-center">Î™®Ïùò Î©¥Ï†ë Ïó∞Ïäµ</h1>
                  
                  {loadingSetup ? (
                    <div className="text-center text-gray-400">Î°úÎî© Ï§ë...</div>
                  ) : !hasResume ? (
                    <div className="text-center space-y-4">
                      <p className="text-red-400">Ïù¥Î†•ÏÑúÎ•º Î®ºÏ†Ä ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.</p>
                      <button
                        onClick={() => window.location.href = '/resume'}
                        className="btn text-white bg-purple-600 hover:bg-purple-700"
                      >
                        Ïù¥Î†•ÏÑú ÏûëÏÑ±ÌïòÎü¨ Í∞ÄÍ∏∞
                      </button>
                    </div>
                  ) : (
                    <div className="bg-gray-800/50 p-6 rounded-xl space-y-6">
                      {/* ÌöåÏÇ¨ ÏÑ†ÌÉù */}
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">ÌöåÏÇ¨ ÏÑ†ÌÉù</label>
                        <select
                          className="form-select w-full bg-gray-700/50 border-gray-600 text-white"
                          value={selectedCompany}
                          onChange={(e) => handleCompanyChange(e.target.value)}
                        >
                          <option value="">ÌöåÏÇ¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                          {companies.map(company => (
                            <option key={company.id} value={company.id}>
                              {company.name}
                            </option>
                          ))}
                        </select>
                      </div>
                      
                      {/* Ìè¨ÏßÄÏÖò ÏÑ†ÌÉù */}
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">Ìè¨ÏßÄÏÖò ÏÑ†ÌÉù</label>
                        <select
                          className="form-select w-full bg-gray-700/50 border-gray-600 text-white"
                          value={selectedPosition}
                          onChange={(e) => setSelectedPosition(e.target.value)}
                          disabled={!selectedCompany}
                        >
                          <option value="">Ìè¨ÏßÄÏÖòÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                          {positions.map(position => (
                            <option key={position.id} value={position.id}>
                              {position.title || position.name}
                            </option>
                          ))}
                        </select>
                      </div>
                      
                      {/* ÏßàÎ¨∏ Í∞úÏàò ÏÑ†ÌÉù */}
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">ÏßàÎ¨∏ Í∞úÏàò</label>
                        <div className="flex gap-4">
                          <label className="flex items-center">
                            <input
                              type="radio"
                              name="questionCount"
                              value="5"
                              checked={questionCount === 5}
                              onChange={(e) => setQuestionCount(Number(e.target.value))}
                              className="mr-2"
                            />
                            <span className="text-gray-300">5Í∞ú</span>
                          </label>
                          <label className="flex items-center">
                            <input
                              type="radio"
                              name="questionCount"
                              value="10"
                              checked={questionCount === 10}
                              onChange={(e) => setQuestionCount(Number(e.target.value))}
                              className="mr-2"
                            />
                            <span className="text-gray-300">10Í∞ú</span>
                          </label>
                          <label className="flex items-center">
                            <input
                              type="radio"
                              name="questionCount"
                              value="15"
                              checked={questionCount === 15}
                              onChange={(e) => setQuestionCount(Number(e.target.value))}
                              className="mr-2"
                            />
                            <span className="text-gray-300">15Í∞ú</span>
                          </label>
                        </div>
                      </div>
                      
                      {/* ÏãúÏûë Î≤ÑÌäº */}
                      <button
                        onClick={handleStart}
                        className="btn w-full text-white bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600"
                        disabled={!selectedPosition}
                      >
                        ‚ñ∂Ô∏è Î©¥Ï†ë ÏãúÏûëÌïòÍ∏∞
                      </button>
                    </div>
                  )}
                </div>
              )}

              {/* Î©¥Ï†ë ÏßÑÌñâ Ï§ë */}
              {interview && question && !summary && (
                <div className="max-w-3xl mx-auto space-y-6">
                  {/* ÏßÑÌñâ ÏÉÅÌô© */}
                  <div className="bg-gray-800/50 p-4 rounded-xl text-center">
                    <p className="text-gray-300">
                      ÏßàÎ¨∏ {currentQuestionIndex} / {questionCount}
                    </p>
                  </div>
                  
                  {/* ÌÉÄÏù¥Î®∏ */}
                  <div className="text-center">
                    <div className="text-4xl font-mono text-white">
                      {String(Math.floor(seconds / 60)).padStart(2, "0")}
                      :
                      {String(seconds % 60).padStart(2, "0")}
                    </div>
                    <p className="text-sm text-gray-500 mt-1">
                      {isCounting ? "ÎãµÎ≥Ä Ï§ë..." : "ÎÖπÏùåÏùÑ ÏãúÏûëÌïòÎ©¥ ÌÉÄÏù¥Î®∏Í∞Ä ÏãúÏûëÎê©ÎãàÎã§"}
                    </p>
                  </div>

                  {/* ÏßàÎ¨∏ Ïπ¥Îìú */}
                  <div className="bg-gray-800/50 rounded-2xl p-6">
                    <h3 className="font-semibold mb-4 text-gray-300">
                      ÏßàÎ¨∏ {question.sequence || currentQuestionIndex}
                    </h3>
                    <p className="whitespace-pre-wrap text-lg text-white">{question.content}</p>
                  </div>

                  {/* ÏÉÅÌÉú Î©îÏãúÏßÄ */}
                  {isSubmitting && (
                    <p className="text-center text-gray-400 animate-pulse">
                      ü§ñ ÎãµÎ≥ÄÏùÑ Ï†úÏ∂úÌïòÍ≥† ÏûàÏäµÎãàÎã§...
                    </p>
                  )}

                  {/* Ïª®Ìä∏Î°§ Î≤ÑÌäº */}
                  <div className="flex justify-center gap-4">
                    {!isRecording && !audioBlob && (
                      <button
                        className="btn text-white bg-purple-600 hover:bg-purple-700 flex items-center gap-2"
                        onClick={handleStartRecording}
                        disabled={isSubmitting}
                      >
                        üéôÔ∏è ÎÖπÏùå ÏãúÏûë
                      </button>
                    )}
                    
                    {isRecording && (
                      <button
                        className="btn text-white bg-red-600 hover:bg-red-700 flex items-center gap-2"
                        onClick={handleStopRecording}
                      >
                        ‚èπÔ∏è ÎÖπÏùå Ï¢ÖÎ£å
                      </button>
                    )}
                    
                    {audioBlob && !isRecording && (
                      <button
                        className="btn text-white bg-green-600 hover:bg-green-700 flex items-center gap-2"
                        onClick={handleSubmitAnswer}
                        disabled={isSubmitting}
                      >
                        ‚úÖ ÎãµÎ≥Ä Ï†úÏ∂ú
                      </button>
                    )}
                  </div>
                </div>
              )}

              {/* Î©¥Ï†ë Ï¢ÖÎ£å ÌõÑ Í≤∞Í≥º ÏöîÏïΩ */}
              {summary && (
                <div className="max-w-4xl mx-auto space-y-6">
                  <h2 className="h2 mb-6 text-center">Î©¥Ï†ë Í≤∞Í≥º ÏöîÏïΩ</h2>
                  
                  <div className="bg-gray-800/50 p-6 rounded-xl mb-6">
                    <p className="text-lg text-gray-300">Ï¥ù ÏÜåÏöî ÏãúÍ∞Ñ: {Math.floor(totalSec / 60)}Î∂Ñ {totalSec % 60}Ï¥à</p>
                    <p className="text-lg text-gray-300">ÎãµÎ≥ÄÌïú ÏßàÎ¨∏ Ïàò: {summary.filter(q => q.answer).length} / {summary.length}</p>
                  </div>
                  
                  {summary.map((q, index) => (
                    <div key={q.id} className="bg-gray-800/50 rounded-xl overflow-hidden">
                      <details className="group">
                        <summary className="cursor-pointer p-4 hover:bg-gray-700/50 transition-colors">
                          <div className="flex items-center justify-between">
                            <h3 className="font-medium text-lg text-white">
                              Q{index + 1}. {q.content}
                            </h3>
                            <span className="text-sm text-gray-400 group-open:rotate-180 transition-transform">
                              ‚ñº
                            </span>
                          </div>
                        </summary>
                        
                        {q.answer ? (
                          <div className="p-4 border-t border-gray-700 space-y-4">
                            <div>
                              <h4 className="font-semibold text-gray-300 mb-2">ÎÇ¥ ÎãµÎ≥Ä:</h4>
                              <p className="whitespace-pre-wrap bg-gray-700/50 p-3 rounded text-gray-100">
                                {q.answer.content || "ÏùåÏÑ± ÎãµÎ≥ÄÏù¥ ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôò Ï§ëÏûÖÎãàÎã§..."}
                              </p>
                            </div>
                            
                            {q.answer.feedback && (
                              <div>
                                <h4 className="font-semibold text-gray-300 mb-2">AI ÌîºÎìúÎ∞±:</h4>
                                <p className="whitespace-pre-wrap bg-blue-900/30 p-3 rounded text-blue-200">
                                  {q.answer.feedback}
                                </p>
                              </div>
                            )}
                            
                            {(q.answer.communicationScore || q.answer.technicalScore || q.answer.structureScore) && (
                              <div className="grid grid-cols-3 gap-4 mt-4">
                                {q.answer.communicationScore && (
                                  <div className="text-center">
                                    <p className="text-sm text-gray-400">ÏùòÏÇ¨ÏÜåÌÜµ</p>
                                    <p className="text-2xl font-bold text-blue-400">{q.answer.communicationScore}/10</p>
                                  </div>
                                )}
                                {q.answer.technicalScore && (
                                  <div className="text-center">
                                    <p className="text-sm text-gray-400">Í∏∞Ïà†Ï†Å Ïù¥Ìï¥</p>
                                    <p className="text-2xl font-bold text-green-400">{q.answer.technicalScore}/10</p>
                                  </div>
                                )}
                                {q.answer.structureScore && (
                                  <div className="text-center">
                                    <p className="text-sm text-gray-400">ÎãµÎ≥Ä Íµ¨Ï°∞</p>
                                    <p className="text-2xl font-bold text-purple-400">{q.answer.structureScore}/10</p>
                                  </div>
                                )}
                              </div>
                            )}
                          </div>
                        ) : (
                          <div className="p-4 border-t border-gray-700">
                            <p className="text-gray-500 italic">ÎãµÎ≥ÄÏù¥ Ï†úÏ∂úÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.</p>
                          </div>
                        )}
                      </details>
                    </div>
                  ))}
                  
                  <div className="flex justify-center mt-8">
                    <button
                      className="btn text-white bg-purple-600 hover:bg-purple-700"
                      onClick={() => window.location.href = '/'}
                    >
                      ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
                    </button>
                  </div>
                </div>
              )}
              
            </div>
          </div>
        </section>
      </main>
      
      <Footer />
    </div>
  );
}