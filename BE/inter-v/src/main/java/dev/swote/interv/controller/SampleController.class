import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import com.pub.data.domain.sample.SampleService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RestController
@RequiredArgsConstructor
@Tag(name = "Sample", description = "Sample API")
public class SampleController {
    
    private final SampleService sampleService;
    
    @GetMapping("/sample")
    @Operation(summary = "샘플", description = "기본 요청입니다. countById 실행 예제입니다.")
    public ResponseEntity<ResponseDTO> sample(
            @RequestParam(name = "id", defaultValue = "1")
            @Parameter(name = "id", description = "테이블의 고유 키(id)", example = "1")
            Integer id
    ) {
        long cnt = sampleService.countById(id);
        return ResponseEntity.ok(ResponseDTO.ok(cnt));
    }

    @GetMapping("/error-sample")
    @Operation(summary = "에러", description = "에러 발생 샘플입니다.")
    public ResponseEntity<ResponseDTO> errorSample() throws Exception {
        sampleService.throwError();
        return ResponseEntity.ok(ResponseDTO.ok());
    }

    @GetMapping("/error-handling-sample")
    @Operation(summary = "에러 핸들링", description = "에러 핸들링 샘플입니다.")
    public ResponseEntity<ResponseDTO> errorHandlingSample() {
        ResponseCode code = ResponseCode.OK;
        try {
            sampleService.throwError();
        } catch(Exception e) {
            log.error("error", e);
            code = ResponseCode.INTERNAL_SERVER_ERROR;
        }
        return ResponseEntity.status(code.getHttpStatus()).body(ResponseDTO.of(code));
    }

    @GetMapping("/custom-exception-sample")
    @Operation(summary = "커스텀 예외", description = "커스텀 예외처리 샘플입니다.")
    public ResponseEntity<ResponseDTO> customExceptionSample() {
        ResponseCode code = ResponseCode.OK;
        sampleService.throwCustomError();
        return ResponseEntity.status(code.getHttpStatus()).body(ResponseDTO.of(code));
    }
    @GetMapping("/login-required-sample")
    @Operation(summary = "로그인 필요한 요청", description = "로그인 정보가 필요한 요청 샘플입니다.")
    public ResponseEntity<ResponseDTO> loginRequiredSample(
            @Parameter(hidden = true) CurrentUser currentUser
    ) {
        ResponseCode code = ResponseCode.OK;

        if (currentUser == null) throw new AuthorizationFailedException();

        User user = sampleService.getUser(currentUser);

        return ResponseEntity.status(code.getHttpStatus()).body(ResponseDTO.of(code, user));
    }
}