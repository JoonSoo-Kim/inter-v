name: Deploy to AWS ECS

on:
  push:
    branches: [ main, master ]
    paths:
      - 'BE/**'  # BE Ìè¥ÎçîÏùò Î≥ÄÍ≤ΩÏÇ¨Ìï≠Îßå Í∞êÏßÄ
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'BE/**'

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: interv
  ECS_SERVICE: interv-service
  ECS_CLUSTER: interv-cluster
  ECS_TASK_DEFINITION: interv-task-ec2

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x BE/inter-v/gradlew
      
    - name: Test with Gradle
      run: |
        cd BE/inter-v
        ./gradlew test --no-daemon
      
    - name: Build with Gradle
      run: |
        cd BE/inter-v
        ./gradlew clean build -x test --no-daemon

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: interv-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "Application URL: https://interv.swote.dev"
        echo "Health Check: https://interv.swote.dev/actuator/health"
        
        # Wait a bit for the service to be fully updated
        sleep 30
        
        # Check service status
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].[serviceName,status,runningCount,pendingCount,desiredCount]' \
          --output table

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deployment successful! üöÄ"
          echo "Access your application at: https://interv.swote.dev"
        else
          echo "‚ùå Deployment failed! üòû"
          echo "Check the logs above for error details."
        fi