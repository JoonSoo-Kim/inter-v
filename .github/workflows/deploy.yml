name: Deploy InterV Application

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

env:
  AWS_REGION: ap-northeast-2
  APPLICATION_NAME: interv

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ~1.6.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Initialize Terraform
      run: |
        cd infrastructure/
        terraform init
    
    - name: Pre-deployment Resource Import
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_key_pair_name: ${{ secrets.EC2_KEY_PAIR_NAME }}
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_app_name: ${{ env.APPLICATION_NAME }}
        TF_VAR_domain_name: "interv.swote.dev"
      run: |
        cd infrastructure/
        
        echo "📥 기존 리소스 Import 및 Route53 문제 해결..."
        
        # 1. 핵심 리소스들 import (실패해도 계속 진행)
        echo "🏗️ 핵심 리소스 Import:"
        terraform import aws_db_subnet_group.main interv-db-subnet-group 2>/dev/null || echo "  ⚠️ DB Subnet Group: 이미 존재하거나 Import 실패"
        terraform import aws_iam_role.ec2_role interv-ec2-role 2>/dev/null || echo "  ⚠️ IAM Role: 이미 존재하거나 Import 실패"
        
        # ALB 관련
        ALB_ARN=$(aws elbv2 describe-load-balancers --names interv-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "None")
        if [ "$ALB_ARN" != "None" ] && [ "$ALB_ARN" != "null" ]; then
          terraform import aws_lb.main "$ALB_ARN" 2>/dev/null || echo "  ⚠️ ALB: 이미 존재하거나 Import 실패"
        fi
        
        TG_ARN=$(aws elbv2 describe-target-groups --names interv-tg --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "None")
        if [ "$TG_ARN" != "None" ] && [ "$TG_ARN" != "null" ]; then
          terraform import aws_lb_target_group.app "$TG_ARN" 2>/dev/null || echo "  ⚠️ Target Group: 이미 존재하거나 Import 실패"
        fi
        
        # Auto Scaling Group
        terraform import aws_autoscaling_group.app interv-asg 2>/dev/null || echo "  ⚠️ ASG: 이미 존재하거나 Import 실패"
        
        # Launch Template
        LT_ID=$(aws ec2 describe-launch-templates --launch-template-names interv-lt --query 'LaunchTemplates[0].LaunchTemplateId' --output text 2>/dev/null || echo "None")
        if [ "$LT_ID" != "None" ] && [ "$LT_ID" != "null" ]; then
          terraform import aws_launch_template.app "$LT_ID" 2>/dev/null || echo "  ⚠️ Launch Template: 이미 존재하거나 Import 실패"
        fi
        
        # 2. Route53 레코드 특별 처리
        echo ""
        echo "🌍 Route53 레코드 처리:"
        
        # Hosted Zone ID 확인
        HOSTED_ZONE_ID=$(aws route53 list-hosted-zones \
          --query "HostedZones[?Name=='swote.dev.'].Id" \
          --output text | cut -d'/' -f3 2>/dev/null || echo "")
        
        if [ -n "$HOSTED_ZONE_ID" ]; then
          echo "  📍 Hosted Zone 발견: $HOSTED_ZONE_ID"
          
          # 기존 A 레코드 확인
          EXISTING_RECORD=$(aws route53 list-resource-record-sets \
            --hosted-zone-id "$HOSTED_ZONE_ID" \
            --query "ResourceRecordSets[?Name=='interv.swote.dev.' && Type=='A']" \
            --output json 2>/dev/null)
          
          if [ "$EXISTING_RECORD" != "[]" ] && [ -n "$EXISTING_RECORD" ]; then
            echo "  ✅ 기존 A 레코드 발견 - Import 시도"
            
            # Route53 레코드 import
            IMPORT_ID="${HOSTED_ZONE_ID}_interv.swote.dev_A"
            if terraform import aws_route53_record.main "$IMPORT_ID" 2>/dev/null; then
              echo "  📥 Route53 레코드 Import 성공!"
            else
              echo "  ⚠️ Route53 Import 실패 - 수동으로 레코드를 삭제하거나 조건부 생성으로 처리됩니다"
            fi
          else
            echo "  ℹ️ 기존 A 레코드 없음 - 새로 생성됩니다"
          fi
        else
          echo "  ❌ Hosted Zone을 찾을 수 없습니다"
        fi
        
        echo ""
        echo "✅ Import 과정 완료!"
    
    - name: Deploy Infrastructure
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_key_pair_name: ${{ secrets.EC2_KEY_PAIR_NAME }}
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_app_name: ${{ env.APPLICATION_NAME }}
        TF_VAR_domain_name: "interv.swote.dev"
      run: |
        cd infrastructure/
        
        echo "📋 Terraform Plan 실행..."
        if terraform plan -out=tfplan; then
          echo "✅ Plan 성공!"
        else
          echo "❌ Plan 실패 - 로그를 확인해주세요"
          exit 1
        fi
        
        echo ""
        echo "🚀 Infrastructure 배포 시작..."
        if terraform apply tfplan; then
          echo "✅ 배포 성공!"
        else
          echo "❌ 배포 실패"
          exit 1
        fi
        
        echo "📊 Output 저장..."
        terraform output -json > terraform-outputs.json
        
        # S3 버킷 이름 저장
        S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
        if [ -n "$S3_BUCKET" ]; then
          echo "S3_BUCKET_NAME=$S3_BUCKET" >> $GITHUB_ENV
          echo "🪣 S3 Bucket: $S3_BUCKET"
        fi
        
        echo "🎉 Infrastructure 배포 완료!"
    
    outputs:
      s3_bucket_name: ${{ env.S3_BUCKET_NAME }}

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: always() && !failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build application
      run: |
        echo "📦 Spring Boot 애플리케이션 빌드..."
        
        if [ -d "inter-v" ]; then
          cd inter-v
          echo "Building in inter-v directory"
        elif [ -d "BE/inter-v" ]; then
          cd BE/inter-v
          echo "Building in BE/inter-v directory"
        else
          echo "❌ Application directory not found!"
          exit 1
        fi
        
        mvn clean package -DskipTests
        
        JAR_FILE=$(find target -name "*.jar" | head -1)
        if [ -n "$JAR_FILE" ]; then
          echo "✅ 빌드 성공: $JAR_FILE"
        else
          echo "❌ 빌드 실패: JAR 파일을 찾을 수 없습니다"
          exit 1
        fi
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy JAR and refresh instances
      run: |
        echo "🚀 애플리케이션 배포 시작..."
        
        # S3 버킷 이름 가져오기
        cd infrastructure/
        terraform init
        S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
        
        if [ -z "$S3_BUCKET" ]; then
          echo "❌ S3 bucket name not found!"
          exit 1
        fi
        
        echo "📤 S3에 업로드: $S3_BUCKET"
        
        # JAR 파일 찾기
        if [ -d "../inter-v" ]; then
          JAR_PATH="../inter-v/target"
        elif [ -d "../BE/inter-v" ]; then
          JAR_PATH="../BE/inter-v/target"
        else
          JAR_PATH="../target"
        fi
        
        JAR_FILE=$(find $JAR_PATH -name "*.jar" | head -1)
        
        if [ -n "$JAR_FILE" ]; then
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # 백업 및 최신 버전 업로드
          aws s3 cp "$JAR_FILE" "s3://$S3_BUCKET/releases/$TIMESTAMP/$APPLICATION_NAME.jar"
          aws s3 cp "$JAR_FILE" "s3://$S3_BUCKET/releases/latest/$APPLICATION_NAME.jar"
          
          echo "✅ JAR 업로드 성공"
          
          # 배포 정보 저장
          echo "{\"timestamp\":\"$TIMESTAMP\",\"commit\":\"$GITHUB_SHA\",\"branch\":\"$GITHUB_REF_NAME\"}" > deployment-info.json
          aws s3 cp deployment-info.json "s3://$S3_BUCKET/releases/latest/deployment-info.json"
          
          # Auto Scaling Group 인스턴스 갱신
          if aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names interv-asg >/dev/null 2>&1; then
            echo "🔄 인스턴스 갱신 시작..."
            
            REFRESH_ID=$(aws autoscaling start-instance-refresh \
              --auto-scaling-group-name interv-asg \
              --preferences MinHealthyPercentage=50,InstanceWarmup=300 \
              --query 'InstanceRefreshId' --output text)
            
            echo "🔄 Instance refresh 시작됨: $REFRESH_ID"
            echo "⏳ 백그라운드에서 계속 진행됩니다..."
          else
            echo "⚠️ Auto Scaling Group을 찾을 수 없습니다"
          fi
          
          echo ""
          echo "🎉 배포 완료!"
          echo "🌐 애플리케이션: https://interv.swote.dev"
          echo "🏥 Health Check: https://interv.swote.dev/actuator/health"
          
        else
          echo "❌ JAR 파일을 찾을 수 없습니다"
          exit 1
        fi