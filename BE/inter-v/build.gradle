plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'dev.swote'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    guavaVersion = '31.1-jre'
    awsSdkVersion = '2.20.56'
    jwtVersion = '0.11.5'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.8.6'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    implementation 'com.querydsl:querydsl-apt:5.1.0:jakarta'

    //querydsl settings...
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    implementation "com.github.ulisesbocchio:jasypt-spring-boot:3.0.5"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'commons-io:commons-io:2.18.0'

    // REST Template
    implementation 'org.apache.httpcomponents:httpcore:4.4.15'
    implementation 'org.apache.httpcomponents.client5:httpclient5'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'org.springdoc:springdoc-openapi-data-rest:1.8.0'

    // AWS SDK - using v1 for compatibility with the existing AwsConfig class
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.477'
    implementation 'com.amazonaws:aws-java-sdk-polly:1.12.477'
    implementation 'com.amazonaws:aws-java-sdk-transcribe:1.12.477'

    // AWS Cognito
    implementation 'com.amazonaws:aws-java-sdk-cognitoidp:1.12.477'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT 처리를 위한 라이브러리
    implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"

    // Spring OAuth2 Resource Server (JWT 검증)
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    // Spring OAuth2 Client (인증 코드 플로우 지원)
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Jackson for JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    // WebSocket for real-time communication (optional for interview sessions)
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // For scheduled tasks (optional for background processing)
    implementation 'org.springframework.boot:spring-boot-starter-quartz'

    // For caching (optional for improving performance)
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.5'

    implementation 'com.h2database:h2:2.2.224'
}

tasks.named('test') {
    useJUnitPlatform()
}